// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: feed_follows.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH new_feed_follow AS (
	INSERT INTO feed_follows (id, created_at, updated_at, user_id, feed_id)
	VALUES ( $1, $2, $3, $4, $5)
	RETURNING id, created_at, updated_at, user_id, feed_id
)

SELECT new_feed_follow.id, new_feed_follow.created_at, new_feed_follow.updated_at, new_feed_follow.user_id, new_feed_follow.feed_id, f.name AS feed_name, u.name as user_name
FROM new_feed_follow
INNER JOIN users u ON new_feed_follow.user_id = u.id
INNER JOIN feeds f on new_feed_follow.feed_id = f.id
`

type CreateFeedFollowParams struct {
	ID        uuid.UUID
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
	UserID    uuid.NullUUID
	FeedID    uuid.NullUUID
}

type CreateFeedFollowRow struct {
	ID        uuid.UUID
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
	UserID    uuid.NullUUID
	FeedID    uuid.NullUUID
	FeedName  sql.NullString
	UserName  string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
		&i.FeedName,
		&i.UserName,
	)
	return i, err
}

const deleteFeedFollowByUserAndURL = `-- name: DeleteFeedFollowByUserAndURL :exec
DELETE FROM feed_follows ff
WHERE ff.user_id = $1 and ff.feed_id = (
	Select id from feeds where url = $2
)
`

type DeleteFeedFollowByUserAndURLParams struct {
	UserID uuid.NullUUID
	Url    sql.NullString
}

func (q *Queries) DeleteFeedFollowByUserAndURL(ctx context.Context, arg DeleteFeedFollowByUserAndURLParams) error {
	_, err := q.db.ExecContext(ctx, deleteFeedFollowByUserAndURL, arg.UserID, arg.Url)
	return err
}

const getFeedByURL = `-- name: GetFeedByURL :one
SELECT id, created_at, updated_at, name, url, user_id, last_fetched_at FROM feeds WHERE url = $1
`

func (q *Queries) GetFeedByURL(ctx context.Context, url sql.NullString) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getFeedByURL, url)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.LastFetchedAt,
	)
	return i, err
}

const getFollowsByUserID = `-- name: GetFollowsByUserID :many
SELECT ff.id, ff.created_at, ff.updated_at, ff.user_id, ff.feed_id, u.name AS user_name, f.name AS feed_name
FROM feed_follows ff
INNER JOIN users u on ff.user_id = u.id
INNER JOIN feeds f on ff.feed_id = f.id
WHERE ff.user_id = $1
`

type GetFollowsByUserIDRow struct {
	ID        uuid.UUID
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
	UserID    uuid.NullUUID
	FeedID    uuid.NullUUID
	UserName  string
	FeedName  sql.NullString
}

func (q *Queries) GetFollowsByUserID(ctx context.Context, userID uuid.NullUUID) ([]GetFollowsByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getFollowsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFollowsByUserIDRow
	for rows.Next() {
		var i GetFollowsByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.FeedID,
			&i.UserName,
			&i.FeedName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
