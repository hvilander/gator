// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (id, created_at, updated_at, title, url, description, published_at, feed_id)
VALUES( $1, $2, $3, $4, $5, $6, $7, $8)

RETURNING id, created_at, updated_at, title, url, description, published_at, feed_id
`

type CreatePostParams struct {
	ID          uuid.UUID
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
	Title       sql.NullString
	Url         sql.NullString
	Description sql.NullString
	PublishedAt sql.NullTime
	FeedID      uuid.NullUUID
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.PublishedAt,
		arg.FeedID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Url,
		&i.Description,
		&i.PublishedAt,
		&i.FeedID,
	)
	return i, err
}

const getPostsByUserID = `-- name: GetPostsByUserID :many
SELECT p.id, p.created_at, p.updated_at, title, p.url, description, published_at, feed_id, f.id, f.created_at, f.updated_at, name, f.url, user_id, last_fetched_at from posts p
INNER JOIN feeds f on $1 = f.user_id
ORDER BY p.published_at
LIMIT $2
`

type GetPostsByUserIDParams struct {
	UserID uuid.NullUUID
	Limit  int32
}

type GetPostsByUserIDRow struct {
	ID            uuid.UUID
	CreatedAt     sql.NullTime
	UpdatedAt     sql.NullTime
	Title         sql.NullString
	Url           sql.NullString
	Description   sql.NullString
	PublishedAt   sql.NullTime
	FeedID        uuid.NullUUID
	ID_2          uuid.UUID
	CreatedAt_2   sql.NullTime
	UpdatedAt_2   sql.NullTime
	Name          sql.NullString
	Url_2         sql.NullString
	UserID        uuid.NullUUID
	LastFetchedAt sql.NullTime
}

func (q *Queries) GetPostsByUserID(ctx context.Context, arg GetPostsByUserIDParams) ([]GetPostsByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByUserID, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsByUserIDRow
	for rows.Next() {
		var i GetPostsByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.PublishedAt,
			&i.FeedID,
			&i.ID_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.Name,
			&i.Url_2,
			&i.UserID,
			&i.LastFetchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
